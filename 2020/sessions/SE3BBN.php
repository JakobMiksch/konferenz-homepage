<!doctype html>
<html lang="de">

<head>
	<?php include "../inc/meta.inc"; ?>

	<base href="<?php echo dirname($_SERVER['SCRIPT_NAME']); ?>">
	<title>Rethinking QGIS plugin packaging – new opportunities through Anaconda? – FOSSGIS 2020</title>

	<link rel="stylesheet" href="./css/normalize.css">
	<link rel="stylesheet" href="./css/base.css">
	<link rel="stylesheet" href="./css/print.css" media="print">
</head>

<body id="programm">
	<?php include "../inc/header.inc"; ?>

        <!-- This file was generated by a script. Do not edit this file in Git,
             edit contents in Pretalx, regenerate the PHP files and commit them
             in the Git repository of the website. -->
        <p><a href="programm/mittwoch.php#session_SE3BBN">&#9668;&#9668; zurück zum Programm</a> <a href="sessions/lightning_talks_1.php">&#9668; zurück zur Session</a></p>
        <h2 class='abstract-title'>Rethinking QGIS plugin packaging – new opportunities through Anaconda?</h2>
        <section>
            <p>
                <span class='abstract-sessiontype'>Lightning Talk</span> von                <span class='abstract-speakers'>Sebastian M. Ernst</span></p>
                            <p><span class='abstract-time-heading'>Zeit: </span>Mittwoch 11. März 18:05 Uhr<br><span class='abstract-room-heading'>Ort: </span>HS Rundbau</p>

            
            <p>Extending QGIS with Python plugins is an incredibly powerful tool. It basically provides access to the entire scientific stack of Python, which is currently seeing rapid development and extension. The limiting factor from a QGIS plugin author’s perspective is the lack of a clear path of defining Python dependencies. While Python packages have setup scripts including dependency definitions or at least requirements files, the corresponding metadata file for QGIS plugins is lacking comparable mechanisms. While it is absolutely possible make a QGIS plugin depend on an arbitrary Python package, its manual installation must be left as an exercise to a hopefully knowledgeable user in many cases. For non-technical users on Windows, plugin authors are therefore essentially limited to whatever is shipped with OSGeo4W at a given time. </p>
<p>Interestingly, QGIS has recently been successfully packaged for the Anaconda Python distribution. Corresponding packages can be found in the <a href="https://anaconda.org/conda-forge/qgis">conda-forge channel</a>, the corresponding project on <a href="https://github.com/conda-forge/qgis-feedstock">Github</a>. This is a huge leap forward and it is this abstract’s author’s opinion that we owe a big thank you to the <a href="https://github.com/conda-forge/qgis-feedstock/graphs/contributors">community members who made it possible</a>. </p>
<p>If QGIS can be understood as an (Anaconda) Python package, its plugins can theoretically also be understood as (Anaconda) Python packages – with all imaginable benefits such as installation scripts, properly pre-compiled arbitrary C, Fortran or C++-components and of cause clean dependencies to other Python packages. This reaches as far as direct access to the latest GPU-accelerated Python packages shipped by Anaconda – also for Windows. </p>
<p>This lightning talk aims to explain the potential and show possible technical paths forward.</p>
        </section>


	<?php include "../inc/footer.inc"; ?>

</body>

</html>